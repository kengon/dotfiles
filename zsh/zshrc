ZDOTDIR=$HOME/dotfiles/zsh

source $ZDOTDIR/zaliases

bindkey -e
ulimit -c 0
fignore=('.o' '~')
setopt autocd
setopt automenu
setopt autolist
setopt nonomatch
setopt correct
setopt listtypes
setopt pushdsilent
setopt notify
setopt printexitvalue
setopt equals
setopt prompt_subst
setopt nobeep
setopt auto_param_keys
setopt auto_param_slash
stty -istrip
unsetopt prompt_cr

# show a command executed last
if [ "$TERM" = "screen" ]; then
  chpwd () { echo -n "_`dirs`\\" }
  preexec() {
    # see [zsh-workers:13180]
    # http://www.zsh.org/mla/workers/2000/msg03993.html
    emulate -L zsh
    local -a cmd; cmd=(${(z)2})
    case $cmd[1] in
      fg)
        if (( $#cmd == 1 )); then
          cmd=(builtin jobs -l %+)
        else
          cmd=(builtin jobs -l $cmd[2])
        fi
        ;;
      %*)
        cmd=(builtin jobs -l $cmd[1])
        ;;
      cd)
        if (( $#cmd == 2)); then
          cmd[1]=$cmd[2]
        fi
        ;&
      *)
        echo -n "k$cmd[1]:t\\"
        return
        ;;
    esac

    local -A jt; jt=(${(kv)jobtexts})

    $cmd >>(read num rest
      cmd=(${(z)${(e):-\$jt$num}})
      echo -n "k$cmd[1]:t\\") 2>/dev/null
  }
  chpwd
fi

# command history
HISTFILE="$ZDOTDIR/zsh_history"
HISTSIZE=100000
SAVEHIST=100000
setopt histignoredups
setopt hist_verify
setopt share_history

# command completion
zstyle ':completion:*:default' menu select=1
autoload -U compinit
compinit -u

# set proompt
function set_prompt() {
  local RED=$'%{\e[1;31m%}'
  local GREEN=$'%{\e[1;32m%}'
  local YELLOW=$'%{\e[1;33m%}'
  local BLUE=$'%{\e[1;34m%}'
  local MAGENTA=$'%{\e[1;35m%}'
  local CYAN=$'%{\e[1;36m%}'
  local DEFAULT=$'%{\e[1;m%}'

  local host_colors md5cmd host_color user_color
  host_colors=($RED $GREEN $YELLOW $BLUE $MAGENTA $CYAN $DEFAULT)
  #md5cmd=md5sum
  md5cmd=md5
  host_color=$host_colors[$(( 0x`echo -n $HOST | $md5cmd | sed -e 's/\\(.\{8\}\\).*/\1/'` % 7))]
  if [ `whoami` = root ]; then
    user_color=$RED
  else
    user_color=$YELLOW
  fi
  PROMPT='['$user_color'%n'$DEFAULT'@'$host_color'%m'$DEFAULT':%(5~,%-2~/.../%2~,%~)]%# '
}
set_prompt


function rprompt-git-current-branch {
  local branch_name st branch_status

  if [ ! -e  ".git" ]; then
    # git¤Ç´ÉÍý¤µ¤ì¤Æ¤¤¤Ê¤¤¥Ç¥£¥ì¥¯¥È¥ê¤Ï²¿¤âÊÖ¤µ¤Ê¤¤
    return
  fi
  branch_name=`git rev-parse --abbrev-ref HEAD 2> /dev/null`
  st=`git status 2> /dev/null`
  if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
    # Á´¤Æcommit¤µ¤ì¤Æ¥¯¥ê¡¼¥ó¤Ê¾õÂÖ
    branch_status="%F{green}"
  elif [[ -n `echo "$st" | grep "^Untracked files"` ]]; then
    # git¤Ë´ÉÍý¤µ¤ì¤Æ¤¤¤Ê¤¤¥Õ¥¡¥¤¥ë¤¬¤¢¤ë¾õÂÖ
    branch_status="%F{red}?"
  elif [[ -n `echo "$st" | grep "^Changes not staged for commit"` ]]; then
    # git add¤µ¤ì¤Æ¤¤¤Ê¤¤¥Õ¥¡¥¤¥ë¤¬¤¢¤ë¾õÂÖ
    branch_status="%F{red}+"
  elif [[ -n `echo "$st" | grep "^Changes to be committed"` ]]; then
    # git commit¤µ¤ì¤Æ¤¤¤Ê¤¤¥Õ¥¡¥¤¥ë¤¬¤¢¤ë¾õÂÖ
    branch_status="%F{yellow}!"
  elif [[ -n `echo "$st" | grep "^rebase in progress"` ]]; then
    # ¥³¥ó¥Õ¥ê¥¯¥È¤¬µ¯¤³¤Ã¤¿¾õÂÖ
    echo "%F{red}!(no branch)"
    return
  else
    # ¾åµ­°Ê³°¤Î¾õÂÖ¤Î¾ì¹ç¤ÏÀÄ¿§¤ÇÉ½¼¨¤µ¤»¤ë
    branch_status="%F{blue}"
  fi

  # ¥Ö¥é¥ó¥ÁÌ¾¤ò¿§ÉÕ¤­¤ÇÉ½¼¨¤¹¤ë
  echo "${branch_status}[$branch_name]"
}


# ¥×¥í¥ó¥×¥È¤¬É½¼¨¤µ¤ì¤ë¤¿¤Ó¤Ë¥×¥í¥ó¥×¥ÈÊ¸»úÎó¤òÉ¾²Á¡¢ÃÖ´¹¤¹¤ë
setopt prompt_subst
# ¥×¥í¥ó¥×¥È¤Î±¦Â¦(RPROMPT)¤Ë¥á¥½¥Ã¥É¤Î·ë²Ì¤òÉ½¼¨¤µ¤»¤ë
RPROMPT='`rprompt-git-current-branch`'
