function! GetStatusEx()
  let str = ''
  let str = str . '' . &fileformat . ']'
  if has('multi_byte') && &fileencoding != ''
    let str = '[' . &fileencoding . ':' . str
  endif
  return str
endfunction

function! s:get_iconv_encodings()
  let l:enc_euc = 'euc-jp'
  let l:enc_jis = 'iso-2022-jp'

  " check whether iconv supports eucJP-ms
  if iconv("\x87\x64\x87\x6a", 'cp932', 'eucjp-ms') ==# "\xad\xc5\xad\xcb"
    let l:enc_euc = 'eucjp-ms'
    let l:enc_jis = 'iso-2022-jp-3'
  " check whether iconv supports JISX0213
  elseif iconv("\x87\x64\x87\x6a", 'cp932', 'euc-jisx0213') ==# "\xad\xc5\xad\xcb"
    let l:enc_euc = 'euc-jisx0213'
    let l:enc_jis = 'iso-2022-jp-3'
  endif

  let l:ret = {'euc' : l:enc_euc, 'jis' : l:enc_jis }
  return l:ret
endfunction

" refer to http://www.kawaz.jp/pukiwiki/?vim#cb691f26
function! s:judge_encodings(enc, fileenc, fileencs)
  let l:enc = a:enc
  let l:fileenc = a:fileenc
  let l:fileencs = a:fileencs

  if l:enc !=# 'utf-8'
    let l:enc = japan
    let l:fileenc = japan
  endif

  if has('iconv')
    let l:iconv_encs = s:get_iconv_encodings()
    let l:enc_euc = iconv_encs['euc']
    let l:enc_jis = iconv_encs['jis']

    " fileencodingsÇç\íz
    if &encoding ==# 'utf-8'
      let l:fileencodings_default = l:fileencs
      let l:fileencs = l:enc_jis .','. l:enc_euc .',cp932'
      let l:fileencs = l:fileencs .','. l:fileencodings_default
    else
      let l:fileencs = l:fileencs .','. l:enc_jis
      let l:fileencs += utf-8,ucs-2le,ucs-2

      if l:enc =~# '^\(euc-jp\|euc-jisx0213\|eucjp-ms\)$'
        let l:fileencs += cp932
        let l:fileencs -= euc-jp
        let l:fileencs -= euc-jisx0213
        let l:fileencs -= eucjp-ms

        let l:enc = l:enc_euc
        let l:fileenc = l:enc_euc
      else
        let l:fileencs = l:fileencs .','.  l:enc_euc
      endif
    endif
  endif

  let l:ret = {'encoding' : l:enc, 'fileencoding' : l:fileenc, 'fileencodings' : l:fileencs }
  return l:ret
endfunction

set ignorecase
set laststatus=2
set statusline=%y%{GetStatusEx()}%F%m%r%=<%l-%c(%p%%)>
set number
set tabstop=4
syntax on
set hlsearch
set listchars=tab:>-
set list
set incsearch
set shiftwidth=4
set formatoptions+=ct
set textwidth=80
set expandtab
set background=dark

filetype plugin on
filetype indent on

let s:encset = s:judge_encodings(&encoding, &fileencoding, &fileencodings)
let &encoding = s:encset['encoding']
let &fileencoding = s:encset['fileencoding']
let &fileencodings = s:encset['fileencodings']

" use encoding as fileencoding if there are no japanese
if has('autocmd')
  function!  AU_ReCheck_FENC()
    if &fileencoding =~# 'iso-2022-jp' && search("[^\x01-\x7e]", 'n') == 0
      let &fileencoding=&encoding
    endif
  endfunction
  autocmd BufReadPost * call AU_ReCheck_FENC()
endif

" autodetect a end-of-line character
set fileformats=unix,dos,mac

" set ambiwidth for changelogs like Å†,Åõ
if exists('&ambiwidth')
  set ambiwidth=double
endif

" highlight whitespace at end-of-line
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/

" changelog.vim
let g:changelog_timeformat = "%Y-%m-%d"
let g:changelog_username = "sakai"

" minibufexpl.vim
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1 

let g:neocomplcache_enable_at_startup = 1

if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
  \| exe "normal g'\"" | endif
endif

" for vundle
" set rtp+=~/.vim/vundle.git/
" call vundle#rc('~/.vim/vundle.git')
" Bundle 'vim-perl/vim-perl'
" Bundle 'hotchpotch/perldoc-vim'

" neobundle
"set encoding=utf-8
"set fileencodings=iso-2022-jp,euc-jp,sjis,utf-8
"set fileformats=unix,dos,mac

" Note: Skip initialization for vim-tiny or vim-small.
"if 0 | endif

if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath^=~/.vim/bundle/neobundle.vim/

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!

let g:go_def_mapping_enabled = 0
NeoBundle 'fatih/vim-go'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

" for gnu global
let g:Gtags_Auto_Map = 1
map <C-g> :Gtags
map <C-h> :Gtags -f %<CR>
map <C-j> :GtagsCursor<CR>
map <C-]> :GtagsCursor<CR>
map <C-n> :cn<CR>
map <C-p> :cp<CR>

